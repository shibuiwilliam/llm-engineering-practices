@startuml

' Interface for LLM operations
interface LLMAdapter {
    + generate(prompt: String): String
    + embed(texts: List<String>): List<Float>
    + chat(messages: List<Message>): Response
}

' Abstract base adapter class
abstract class BaseLLMAdapter {
    # apiKey: String
    # modelName: String
    + {abstract} generate(prompt: String): String
    + {abstract} embed(texts: List<String>): List<Float>
    + {abstract} chat(messages: List<Message>): Response
}

' Concrete adapter implementations
class OpenAIAdapter {
    - openaiClient: OpenAIClient
    + generate(prompt: String): String
    + embed(texts: List<String>): List<Float>
    + chat(messages: List<Message>): Response
}

class AnthropicAdapter {
    - anthropicClient: AnthropicClient
    + generate(prompt: String): String
    + embed(texts: List<String>): List<Float>
    + chat(messages: List<Message>): Response
}

class OSSAdapter {
    - ossClient: OSSClient
    + generate(prompt: String): String
    + embed(texts: List<String>): List<Float>
    + chat(messages: List<Message>): Response
}

' Application service using the adapter
class LLMService {
    - adapter: LLMAdapter
    + processWithLLM(input: String): Result
}

' Relationships
LLMAdapter <|.. BaseLLMAdapter
BaseLLMAdapter <|-- OpenAIAdapter
BaseLLMAdapter <|-- AnthropicAdapter
BaseLLMAdapter <|-- OSSAdapter
LLMService o-- LLMAdapter

note right of LLMAdapter
  Common interface for all LLM providers
end note

note right of BaseLLMAdapter
  Abstract base class with shared functionality
end note

note right of LLMService
  Business logic using the unified interface
end note

@enduml 