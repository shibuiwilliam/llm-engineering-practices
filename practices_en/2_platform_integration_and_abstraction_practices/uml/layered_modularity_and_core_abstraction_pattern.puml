@startuml Layered Modularity & Core Abstraction Pattern

skinparam componentStyle uml2
skinparam backgroundColor white
skinparam handwritten false

' Define components
package "Extension / Community Layer" {
    [Custom Plugins] as plugins
    [Project-specific Processors] as processors
    [Community Extensions] as extensions
}

package "Integration Layer" {
    [Database Connectors] as db
    [Cache Systems] as cache
    [External Tools] as tools
    [Vendor SDKs] as sdk
}

package "Core Layer" {
    [LLM API Abstraction] as llm
    [Authentication] as auth
    [Prompt Policy] as prompt
    [Logging] as log
}

' Define interfaces
interface "Plugin Interface" as pluginI
interface "Integration Interface" as integrationI

' Define relationships
plugins -down-> pluginI
processors -down-> pluginI
extensions -down-> pluginI

pluginI -down-> integrationI

db -up-> integrationI
cache -up-> integrationI
tools -up-> integrationI
sdk -up-> integrationI

integrationI -down-> llm
integrationI -down-> auth
integrationI -down-> prompt
integrationI -down-> log

' Add notes
note right of plugins
  Custom implementations
  and project-specific
  functionality
end note

note right of db
  Database, cache, and
  external service
  integrations
end note

note right of llm
  Stable core functionality
  and base abstractions
end note

@enduml 