@startuml
' Class Diagram
skinparam classAttributeIconSize 0

package "Prompt Unit Testing Pattern" {
    class PromptTestCase {
        +input: String
        +expectedOutput: String[]
        +validationRules: ValidationRule[]
        +run(): TestResult
    }

    class ValidationRule {
        +validate(output: String): boolean
    }

    class TestResult {
        +passed: boolean
        +actualOutput: String
        +validationErrors: String[]
    }

    class PromptTestRunner {
        +runTests(testCases: PromptTestCase[]): TestResult[]
        +generateSnapshot(output: String): String
    }

    class LLMWrapper {
        +execute(prompt: String): String
    }

    class SnapshotManager {
        +saveSnapshot(testCase: PromptTestCase, output: String)
        +compareWithSnapshot(testCase: PromptTestCase, output: String): boolean
    }

    PromptTestCase --> ValidationRule
    PromptTestCase --> TestResult
    PromptTestRunner --> PromptTestCase
    PromptTestRunner --> LLMWrapper
    PromptTestRunner --> SnapshotManager
}

@enduml

@startuml
' Sequence Diagram
skinparam sequenceMessageAlign center

actor Developer
participant "PromptTestCase" as TC
participant "PromptTestRunner" as Runner
participant "LLMWrapper" as LLM
participant "ValidationRule" as VR
participant "SnapshotManager" as SM

Developer -> TC: Create test case
activate TC

Developer -> Runner: Run tests
activate Runner

Runner -> TC: Execute test case
activate TC

TC -> LLM: Execute prompt
activate LLM
LLM --> TC: Return output
deactivate LLM

TC -> VR: Validate output
activate VR
VR --> TC: Validation result
deactivate VR

TC -> SM: Compare with snapshot
activate SM
SM --> TC: Snapshot comparison result
deactivate SM

TC --> Runner: Return test result
deactivate TC

Runner --> Developer: Return all test results
deactivate Runner

@enduml 